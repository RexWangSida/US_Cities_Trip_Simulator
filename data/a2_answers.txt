3.1
To solve the problem, I used undirected and edge unweighted graph. The nodes of the graph represent the numbers I assigned to each city, which is (No) in city ADT and index of adj.The edges provides the connection between cities.I implemented the graph and BFS & DFS with the code in textbook Algorithm 4th Edition. And I also used some data structures that in Algorithms 4th downloaded from princeton.edu. For the algorithm to find the lowest cost path, I used a modified Dijkstra's algorithm to solve the problem.
3.2
By observation of output of BFS & DFS, BFS found the result in fewer steps. This statement stays true even if the number of stops increases. It is because DFS go through every route possibly and BFS go through every node in each level of depth first. BFS can efficiently find the shortest path in an edge unweighted graph but only best case of DFS could possibly do this.
3.4
The complexity of this problem will be V^2, it takes V times to accomplish the modified Dijkstra's algorithm and each time it checks every vertex once. The complexity will not remain the same if number of stops increased because it will change the number of access to each city(vertex). If the number of cities increase, the complexity will not change because it is represented by V. The increase of number of restaurants will not affect complexity since in my design there are only two cheapest meals that take in count to solve the problem of having meals.